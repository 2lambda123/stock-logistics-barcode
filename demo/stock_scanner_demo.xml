<?xml version="1.0" ?>
<openerp>
    <data noupdate="0">

        <!-- Sentinel user -->
        <record id="user_sentinel" model="res.users">
            <field name="name">sentinel</field>
            <field name="login">sentinel</field>
            <field name="password">sentinel</field>
            <field name="company_id" ref="base.main_company"/>
            <field name="groups_id" eval="[(6,0,[ref('group_stock_scanner_sentinel')])]"/>
        </record>
    
        <!-- Scanner Hardware  -->
        <record id ="scanner_hardware_1" model="scanner.hardware">
            <field name="name">Hardware 1</field>
            <field name="code">hard1</field>
            <field name="screen_width">40</field>
            <field name="screen_height">20</field>
            <field name="warehouse_id" ref="stock.warehouse0"/>
        </record>
        
        <!-- Tutorial menu -->
        <record id ="scanner_scenario_menu_tutorial" model="scanner.scenario">
            <field name="name">Tutorial</field>
            <field name="type">menu</field>
            <field name="warehouse_ids" eval="[(4, ref('stock.warehouse0')),(4, ref('stock.stock_warehouse_shop0'))]"/>
            <field name="sequence">10</field>
        </record>

        <!-- Step types Scenario -->

        <record id ="scanner_scenario_step_types" model="scanner.scenario">
            <field name="name">Step types</field>
            <field name="type">scenario</field>
            <field name="model_id" ref="model_scanner_hardware"/>
            <field name="parent_id" ref="scanner_scenario_menu_tutorial"/>
            <field name="warehouse_ids" eval="[(4, ref('stock.warehouse0')),(4, ref('stock.stock_warehouse_shop0'))]"/>
            <field name="sequence">100</field>
        </record>

       <record id="scanner_scenario_step_types_intro_step" model="scanner.scenario.step">
            <field name="name">Introduction</field>
            <field name="no_back" eval="False"/>
            <field name="step_start" eval="True"/>
            <field name="step_stop" eval="False"/>
            <field name="step_back" eval="True"/>
            <field name="scenario_id" ref="scanner_scenario_step_types"/>
            <field name="python_code"><![CDATA[# Use <m> or <message> to retrieve the data transmitted by the scanner.
# Use <t> or <terminal> to retrieve the running terminal browse record.
# Put the returned action code in <act>, as a single character.
# Put the returned result or message in <res>, as a list of strings.
# Put the returned value in <val>, as an integer

act = 'M'
res = [
    '|Introduction',
    '',
    'Welcome on the stock_scanner module.',
    '',
    'This scenario will explain all step types.',
    # '',
    # 'All step types allow scrolling, if the displayed text doesn\'t fit on the screen.',
    # 'To scroll, simply use the arrow keys.',
    # '',
    # 'For \'List\' steps, the scrolling is horizontal, because the vertical moves are used to choose the value.',
    # 'For all other types of steps, the scrolling is vertical.',
]
]]></field>
        </record>

        <record id="scanner_scenario_step_types_confirm_step" model="scanner.scenario.step">
            <field name="name">C: Confirm</field>
            <field name="no_back" eval="False"/>
            <field name="step_start" eval="False"/>
            <field name="step_stop" eval="False"/>
            <field name="step_back" eval="True"/>
            <field name="scenario_id" ref="scanner_scenario_step_types"/>
            <field name="python_code"><![CDATA[# Use <m> or <message> to retrieve the data transmitted by the scanner.
# Use <t> or <terminal> to retrieve the running terminal browse record.
# Put the returned action code in <act>, as a single character.
# Put the returned result or message in <res>, as a list of strings.
# Put the returned value in <val>, as an integer

act = 'C'
res = [
    '|Confirm step',
    '',
    'This step waits for a confirmation from the user.',
]
]]></field>
        </record>

        <record id="scanner_scenario_step_types_list_step" model="scanner.scenario.step">
            <field name="name">L: List</field>
            <field name="no_back" eval="False"/>
            <field name="step_start" eval="False"/>
            <field name="step_stop" eval="False"/>
            <field name="step_back" eval="True"/>
            <field name="scenario_id" ref="scanner_scenario_step_types"/>
            <field name="python_code"><![CDATA[# Use <m> or <message> to retrieve the data transmitted by the scanner.
# Use <t> or <terminal> to retrieve the running terminal browse record.
# Put the returned action code in <act>, as a single character.
# Put the returned result or message in <res>, as a list of strings.
# Put the returned value in <val>, as an integer

act = 'L'
res = [
    ('|', 'List step'),
    ('error', 'Go to Error step'),
    ('continue', 'Go to next step'),
]
]]></field>
        </record>
 
        <record id="scanner_scenario_step_types_error_step" model="scanner.scenario.step">
            <field name="name">E: Error</field>
            <field name="no_back" eval="False"/>
            <field name="step_start" eval="False"/>
            <field name="step_stop" eval="False"/>
            <field name="step_back" eval="False"/>
            <field name="scenario_id" ref="scanner_scenario_step_types"/>
            <field name="python_code"><![CDATA[# Use <m> or <message> to retrieve the data transmitted by the scanner.
# Use <t> or <terminal> to retrieve the running terminal browse record.
# Put the returned action code in <act>, as a single character.
# Put the returned result or message in <res>, as a list of strings.
# Put the returned value in <val>, as an integer

act = 'E'
res = [
    '|Error step',
    '',
    'This step shows an error message, using the error colors defined in the hardware configuration.',
    '',
    'After this step, the scenario automatically goes back if the returned value is set to True.',
]
val = True
]]></field>
        </record>

        <record id="scanner_scenario_step_types_quantity_step" model="scanner.scenario.step">
            <field name="name">Q : Quantity (float)</field>
            <field name="no_back" eval="False"/>
            <field name="step_start" eval="False"/>
            <field name="step_stop" eval="False"/>
            <field name="step_back" eval="False"/>
            <field name="scenario_id" ref="scanner_scenario_step_types"/>
            <field name="python_code"><![CDATA[# Use <m> or <message> to retrieve the data transmitted by the scanner.
# Use <t> or <terminal> to retrieve the running terminal browse record.
# Put the returned action code in <act>, as a single character.
# Put the returned result or message in <res>, as a list of strings.
# Put the returned value in <val>, as an integer

act = 'Q'
res = [
    '|Quantity (float) step',
    '',
    'This step allows the user to send float quantities.',
]
]]></field>
        </record>

  <record id="scanner_scenario_step_types_number_step" model="scanner.scenario.step">
            <field name="name">N : Number (integer)</field>
            <field name="no_back" eval="False"/>
            <field name="step_start" eval="False"/>
            <field name="step_stop" eval="False"/>
            <field name="step_back" eval="False"/>
            <field name="scenario_id" ref="scanner_scenario_step_types"/>
            <field name="python_code"><![CDATA[# Use <m> or <message> to retrieve the data transmitted by the scanner.
# Use <t> or <terminal> to retrieve the running terminal browse record.
# Put the returned action code in <act>, as a single character.
# Put the returned result or message in <res>, as a list of strings.
# Put the returned value in <val>, as an integer

act = 'N'
res = [
    '|Number (integer) step',
    '',
    'This step allows the user to send integer numbers.',
]
]]></field>
        </record>
  
        <record id="scanner_scenario_step_types_text_step" model="scanner.scenario.step">
            <field name="name">T : Text input</field>
            <field name="no_back" eval="False"/>
            <field name="step_start" eval="False"/>
            <field name="step_stop" eval="False"/>
            <field name="step_back" eval="False"/>
            <field name="scenario_id" ref="scanner_scenario_step_types"/>
            <field name="python_code"><![CDATA[# Use <m> or <message> to retrieve the data transmitted by the scanner.
# Use <t> or <terminal> to retrieve the running terminal browse record.
# Put the returned action code in <act>, as a single character.
# Put the returned result or message in <res>, as a list of strings.
# Put the returned value in <val>, as an integer

act = 'T'
res = [
    '|Text input step',
    '',
    'This step allows the user to enter custom text.',
    '',
    'You will also use this step for barcode scanning.',
]
]]></field>
        </record>

       <record id="scanner_scenario_step_types_message_step" model="scanner.scenario.step">
            <field name="name">M : Message</field>
            <field name="no_back" eval="False"/>
            <field name="step_start" eval="False"/>
            <field name="step_stop" eval="False"/>
            <field name="step_back" eval="True"/>
            <field name="scenario_id" ref="scanner_scenario_step_types"/>
            <field name="python_code"><![CDATA[# Use <m> or <message> to retrieve the data transmitted by the scanner.
# Use <t> or <terminal> to retrieve the running terminal browse record.
# Put the returned action code in <act>, as a single character.
# Put the returned result or message in <res>, as a list of strings.
# Put the returned value in <val>, as an integer

act = 'M'
res = [
    '|Message step',
    '',
    'A step designed to display some information, without waiting for any user input.',
]
]]></field>
        </record>

         <record id="scanner_scenario_step_types_final_step" model="scanner.scenario.step">
            <field name="name">F : Final</field>
            <field name="no_back" eval="False"/>
            <field name="step_start" eval="False"/>
            <field name="step_stop" eval="True"/>
            <field name="step_back" eval="False"/>
            <field name="scenario_id" ref="scanner_scenario_step_types"/>
            <field name="python_code"><![CDATA[# Use <m> or <message> to retrieve the data transmitted by the scanner.
# Use <t> or <terminal> to retrieve the running terminal browse record.
# Put the returned action code in <act>, as a single character.
# Put the returned result or message in <res>, as a list of strings.
# Put the returned value in <val>, as an integer

act = 'F'
res = [
    '|Final step',
    '',
    'After this step, the scenario is finished.',
]
]]></field>
        </record>
 
        <record id="scanner_scenario_transition_list_to_error" model="scanner.scenario.transition">
            <field name="name">L &gt; E"</field>
            <field name="from_id" ref="scanner_scenario_step_types_list_step"/>
            <field name="to_id" ref="scanner_scenario_step_types_error_step"/>
            <field name="transition_type">keyboard</field>
            <field name="scenario_id" ref="scanner_scenario_login"/>
            <field name="condition">message == "error"</field>
        </record>

        <record id="scanner_scenario_transition_quantity_to_text" model="scanner.scenario.transition">
            <field name="name">Q &gt; T</field>
            <field name="from_id" ref="scanner_scenario_step_types_quantity_step"/>
            <field name="to_id" ref="scanner_scenario_step_types_text_step"/>
            <field name="transition_type">keyboard</field>
            <field name="scenario_id" ref="scanner_scenario_login"/>
            <field name="condition">True</field>
        </record>

        <record id="scanner_scenario_transition_text_to_final" model="scanner.scenario.transition">
            <field name="name">T &gt; F</field>
            <field name="from_id" ref="scanner_scenario_step_types_text_step"/>
            <field name="to_id" ref="scanner_scenario_step_types_final_step"/>
            <field name="transition_type">keyboard</field>
            <field name="scenario_id" ref="scanner_scenario_login"/>
            <field name="condition">True</field>
        </record>

        <record id="scanner_scenario_transition_intro_to_message" model="scanner.scenario.transition">
            <field name="name">Intro &gt; M</field>
            <field name="from_id" ref="scanner_scenario_step_types_intro_step"/>
            <field name="to_id" ref="scanner_scenario_step_types_message_step"/>
            <field name="transition_type">keyboard</field>
            <field name="scenario_id" ref="scanner_scenario_login"/>
            <field name="condition">True</field>
        </record>

        <record id="scanner_scenario_transition_message_to_list" model="scanner.scenario.transition">
            <field name="name">M &gt; L</field>
            <field name="from_id" ref="scanner_scenario_step_types_message_step"/>
            <field name="to_id" ref="scanner_scenario_step_types_list_step"/>
            <field name="transition_type">keyboard</field>
            <field name="scenario_id" ref="scanner_scenario_login"/>
            <field name="condition">True</field>
        </record>

        <record id="scanner_scenario_transition_confirm_to_number" model="scanner.scenario.transition">
            <field name="name">C &gt; N</field>
            <field name="from_id" ref="scanner_scenario_step_types_confirm_step"/>
            <field name="to_id" ref="scanner_scenario_step_types_number_step"/>
            <field name="transition_type">keyboard</field>
            <field name="scenario_id" ref="scanner_scenario_login"/>
            <field name="condition">True</field>
        </record>

        <record id="scanner_scenario_transition_list_to_confirm" model="scanner.scenario.transition">
            <field name="name">L &gt; C</field>
            <field name="from_id" ref="scanner_scenario_step_types_list_step"/>
            <field name="to_id" ref="scanner_scenario_step_types_confirm_step"/>
            <field name="transition_type">keyboard</field>
            <field name="scenario_id" ref="scanner_scenario_login"/>
            <field name="condition">"message == 'continue'"</field>
        </record>

        <record id="scanner_scenario_transition_number_to_quantity" model="scanner.scenario.transition">
            <field name="name">N &gt; Q</field>
            <field name="from_id" ref="scanner_scenario_step_types_number_step"/>
            <field name="to_id" ref="scanner_scenario_step_types_quantity_step"/>
            <field name="transition_type">keyboard</field>
            <field name="scenario_id" ref="scanner_scenario_login"/>
            <field name="condition">True</field>
        </record>
    </data>

</openerp>
